package scouting2016;

import java.awt.Desktop;
import java.awt.Dimension;
import java.awt.List;
import java.awt.Toolkit;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.util.NoSuchElementException;
import java.util.ArrayList;
import java.util.Scanner;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.UIManager;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Adam Frick
 */
public class MainFrame extends javax.swing.JFrame {
    public MainFrame() throws FileNotFoundException {
        
    try   
    {
        // sets look and feely
        UIManager.setLookAndFeel
            ("javax.swing.plaf.metal.MetalLookAndFeel");

    } 
    
    catch(Exception e)
        
    {
        // the user must be aware!
        // look and feel may be unsupported by platform
        JOptionPane.showMessageDialog(null,
        "The Scouting UI cannot be properly initialized. \n"
                + "The program will execute, but it may not "
                + "appear or function as intended.",
        "Error",
        JOptionPane.ERROR_MESSAGE);
    }
            
        // initializes functionality
        initComponents();       
        
        Parser parse = new Parser();
        
        parse.tableParse(introTable);
        
        windowSet();
        folderCreate();
        
        comboQuerySet();
        
        //makes window visible to user
        setVisible(true);
        
        //todo: if "Sheets" folder doesn't exist, create it
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        newPopup = new javax.swing.JPopupMenu();
        newMatchPopup = new javax.swing.JMenuItem();
        newPitPopup = new javax.swing.JMenuItem();
        viewPopup = new javax.swing.JPopupMenu();
        viewMatchPopup = new javax.swing.JMenuItem();
        viewPitPopup = new javax.swing.JMenuItem();
        jCheckBox1 = new javax.swing.JCheckBox();
        mainPanel = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        mainTable = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        introTable = new javax.swing.JTable();
        introRefresh = new javax.swing.JButton();
        introOpen = new javax.swing.JButton();
        newPopupButton = new javax.swing.JButton();
        viewPopupButton = new javax.swing.JButton();
        queryCombo = new javax.swing.JComboBox<>();
        queryCheck = new javax.swing.JCheckBox();
        queryText = new javax.swing.JTextField();
        querySpinner = new javax.swing.JSpinner();

        newMatchPopup.setText("Match Form");
        newMatchPopup.setVerticalAlignment(javax.swing.SwingConstants.BOTTOM);
        newMatchPopup.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newMatchPopupActionPerformed(evt);
            }
        });
        newPopup.add(newMatchPopup);

        newPitPopup.setText("Pit Form");
        newPitPopup.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newPitPopupActionPerformed(evt);
            }
        });
        newPopup.add(newPitPopup);

        viewMatchPopup.setText("Match Sheets");
        viewMatchPopup.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewMatchPopupActionPerformed(evt);
            }
        });
        viewPopup.add(viewMatchPopup);

        viewPitPopup.setText("Pit Sheets");
        viewPitPopup.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewPitPopupActionPerformed(evt);
            }
        });
        viewPopup.add(viewPitPopup);

        jCheckBox1.setText("jCheckBox1");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Scouting 2016");
        setMinimumSize(new java.awt.Dimension(828, 652));

        mainPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        mainPanel.setPreferredSize(new java.awt.Dimension(800, 600));

        mainTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Scouter Name", "Team #", "Match #", "Grand Total Points", "Overall Performance", "Driving System", "Driving System Functionality", "Mover System", "Mover System Functionality", "Foul Points", "Additional Comments", "Autonomous Points", "Teleoperation Points", "Coopertition Points"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(mainTable);
        //height 400

        introTable.setAutoCreateRowSorter(true);
        introTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Team #", "Highest Score", "Mean Score", "Win Rate (%)", "Query"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(introTable);

        introRefresh.setText("Refresh");
        introRefresh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                introRefreshActionPerformed(evt);
            }
        });

        introOpen.setText("Open Team Sheets");
        introOpen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                introOpenActionPerformed(evt);
            }
        });

        newPopupButton.setText("New");
        newPopupButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newPopupButtonActionPerformed(evt);
            }
        });

        viewPopupButton.setText("View");
        viewPopupButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewPopupButtonActionPerformed(evt);
            }
        });

        queryCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                queryComboActionPerformed(evt);
            }
        });

        queryCheck.setEnabled(false);
        queryCheck.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                queryCheckActionPerformed(evt);
            }
        });

        queryText.setEnabled(false);
        queryText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                queryTextActionPerformed(evt);
            }
        });

        querySpinner.setEnabled(false);
        querySpinner.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                querySpinnerStateChanged(evt);
            }
        });

        javax.swing.GroupLayout mainPanelLayout = new javax.swing.GroupLayout(mainPanel);
        mainPanel.setLayout(mainPanelLayout);
        mainPanelLayout.setHorizontalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mainPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(mainPanelLayout.createSequentialGroup()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 772, Short.MAX_VALUE)
                        .addContainerGap())
                    .addGroup(mainPanelLayout.createSequentialGroup()
                        .addComponent(newPopupButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(viewPopupButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(introRefresh)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(introOpen)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(queryCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(queryCheck)
                        .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(mainPanelLayout.createSequentialGroup()
                                .addGap(12, 12, 12)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                            .addGroup(mainPanelLayout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(queryText, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(querySpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE))))))
        );
        mainPanelLayout.setVerticalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, mainPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(mainPanelLayout.createSequentialGroup()
                        .addComponent(queryCheck)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(introRefresh, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(introOpen, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(newPopupButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(viewPopupButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(queryCombo)
                        .addGroup(mainPanelLayout.createSequentialGroup()
                            .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(querySpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(queryText, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGap(0, 0, Short.MAX_VALUE))))
                .addGap(0, 0, 0)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 544, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        setVisible(false);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addComponent(mainPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(mainPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void introRefreshActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_introRefreshActionPerformed
        try
        {
            System.out.println("REFRESHING");
            
            Parser parse = new Parser();
            
            parse.tableParse(introTable);
        }
        catch (FileNotFoundException e)
        {
            
        }
    }//GEN-LAST:event_introRefreshActionPerformed

    private void introOpenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_introOpenActionPerformed
        
        int selRow = introTable.getSelectedRow();
        
        if (selRow != -1)   
        {
            try 
            {
                TeamFrame teamSelected = new TeamFrame(Integer.parseInt(introTable.getValueAt(selRow, 0).toString()));    
            } 
            catch (FileNotFoundException ex) 
            {
                System.out.println("Error (FNFE)");
            } 
            catch (IOException ex) {
                System.out.println("Error (IOE)");
            }
        }
        
        else
        {
            JOptionPane.showMessageDialog(null,
            "You haven't selected a team.",
            "Error",
            JOptionPane.ERROR_MESSAGE);
        }
        
    }//GEN-LAST:event_introOpenActionPerformed

    private void newPopupButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newPopupButtonActionPerformed
        newPopup.show(this, newPopupButton.getX()+10, newPopupButton.getY()+65);
    }//GEN-LAST:event_newPopupButtonActionPerformed

    private void newMatchPopupActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newMatchPopupActionPerformed
        FormMatch matchSheet = new FormMatch();
    }//GEN-LAST:event_newMatchPopupActionPerformed

    private void newPitPopupActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newPitPopupActionPerformed
        FormPit pitSheet = new FormPit();
    }//GEN-LAST:event_newPitPopupActionPerformed

    private void viewPopupButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewPopupButtonActionPerformed
        viewPopup.show(this, viewPopupButton.getX()+10, viewPopupButton.getY()+65);
    }//GEN-LAST:event_viewPopupButtonActionPerformed

    private void viewPitPopupActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewPitPopupActionPerformed
        Desktop desktop = Desktop.getDesktop();
        try 
        {
            File dirOpen = new File("./PitSheets");
            desktop.open(dirOpen);
        }
        catch (Exception e) 
        {
            JOptionPane.showMessageDialog(null,
            "Error opening default file explorer.",
            "Error",
            JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_viewPitPopupActionPerformed

    private void viewMatchPopupActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewMatchPopupActionPerformed
        Desktop desktop = Desktop.getDesktop();
        try 
        {
            File dirOpen = new File("./Sheets");
            desktop.open(dirOpen);
        }
        catch (Exception e) 
        {
            JOptionPane.showMessageDialog(null,
            "Error opening default file explorer.",
            "Error",
            JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_viewMatchPopupActionPerformed

    private void queryComboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_queryComboActionPerformed
        Parser parse = new Parser();
        Template template = new Template();
                
        querySpinner.setValue(0);
        queryText.setText("");
        queryCheck.setSelected(false);
        
        querySpinner.setEnabled(false);
        queryText.setEnabled(false);
        queryCheck.setEnabled(false);
        
        try 
        {
            String dataType = parse.queryFind(null, template.templateStr,
                    queryCombo.getSelectedItem().toString(), true);
            if (dataType.equals("BOOLEAN"))
                queryCheck.setEnabled(true);
            if (dataType.equals("STRING"))
                queryText.setEnabled(true);
            if (dataType.equals("INTEGER"))
                querySpinner.setEnabled(true);
            
        } 
        catch (FileNotFoundException ex) 
        {
            System.out.println("Error (IO)");
        }
    }//GEN-LAST:event_queryComboActionPerformed

    private void queryCheckActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_queryCheckActionPerformed
        queryChanged(0);
    }//GEN-LAST:event_queryCheckActionPerformed

    private void queryTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_queryTextActionPerformed
        queryChanged(1);
    }//GEN-LAST:event_queryTextActionPerformed

    private void querySpinnerStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_querySpinnerStateChanged
        queryChanged(2);
    }//GEN-LAST:event_querySpinnerStateChanged


    private void folderCreate()
    {
        String defaultPath = "./Sheets";
        
        try
        {
        
            if (!(new File("./Sheets").exists()))
            {
                new File("./Sheets").mkdir();
            }
            
            if (!(new File("./PitSheets").exists()))
            {
                new File("./PitSheets").mkdir();
            }
        }
        
        catch (Exception e)
        {
            System.out.println("Error creating folder");
        }
    }
    
    private void comboQuerySet() throws FileNotFoundException {
        Parser parse = new Parser();
        parse.comboSet(queryCombo);
        
        
    }
    
    private void queryChanged(int queryIndex) {
        
        
        
        switch (queryIndex) {
            case 0:
                break;
            case 1:
                break;
            case 2:
                break;
        }
    }
    
    private void windowSet() {
 
         // sets window to center of screen
        Dimension dim = Toolkit.getDefaultToolkit().getScreenSize();
        double width = dim.getWidth();
        double height = dim.getHeight();
    
        // alerts user if screen resolution is below 1024x768 
        if (width<1024 || height<768)
        
        {
            JOptionPane.showMessageDialog(null,
            "Your screen resolution is not supported. Some "
                    + "elements may not appear or may appear incorrectly.",
            "Error",
            JOptionPane.ERROR_MESSAGE);
        }
    
        // sets window to center of screen
        setLocation(dim.width/2-this.getSize().width/2, dim.height/2-this.getSize().height/2);
        
    }
    
    public static void main(String args[]) {
        
    
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton introOpen;
    private javax.swing.JButton introRefresh;
    private javax.swing.JTable introTable;
    private javax.swing.JCheckBox jCheckBox1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JPanel mainPanel;
    private javax.swing.JTable mainTable;
    private javax.swing.JMenuItem newMatchPopup;
    private javax.swing.JMenuItem newPitPopup;
    private javax.swing.JPopupMenu newPopup;
    private javax.swing.JButton newPopupButton;
    private javax.swing.JCheckBox queryCheck;
    private javax.swing.JComboBox<String> queryCombo;
    private javax.swing.JSpinner querySpinner;
    private javax.swing.JTextField queryText;
    private javax.swing.JMenuItem viewMatchPopup;
    private javax.swing.JMenuItem viewPitPopup;
    private javax.swing.JPopupMenu viewPopup;
    private javax.swing.JButton viewPopupButton;
    // End of variables declaration//GEN-END:variables
}
