package scouting2016;

import java.awt.Desktop;
import java.awt.Dimension;
import static java.awt.SystemColor.desktop;
import java.awt.Toolkit;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Scanner;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.UIManager;
import javax.swing.table.DefaultTableColumnModel;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumn;
import javax.swing.table.TableColumnModel;

/**
 *
 * @author Adam Frick
 */
public class TeamFrame extends javax.swing.JFrame {

    private int introTeamFinal;
    private ArrayList<String> teamColumnDefault = new ArrayList<>();
    int columnsAdded = 0;
    
    /**
     * Creates new form teamFrame
     */
    public TeamFrame(int introTeam) throws FileNotFoundException, IOException {
        
        introTeamFinal = introTeam;
        initComponents();
        
        DefaultTableModel teamModel = (DefaultTableModel) teamTable.getModel();
        for (int i = 0; i < teamModel.getColumnCount(); i++) 
        {
            teamColumnDefault.add(teamModel.getColumnName(i));
        }
        
        try   
        {
            // sets look and feely
            UIManager.setLookAndFeel
            ("javax.swing.plaf.metal.MetalLookAndFeel");

        }  
        catch (Exception e)
        {
            System.out.println("Unable to set look and feel");
        }
        
        
        tableSet(introTeamFinal);
        
        
        // sets window to center of screen
        Dimension dim = Toolkit.getDefaultToolkit().getScreenSize();
        double width = dim.getWidth();
        double height = dim.getHeight();
    
        // sets window to center of screen
        setLocation(dim.width/2-this.getSize().width/2, dim.height/2-this.getSize().height/2);
        
        setVisible(true);       
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        mainPanel = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        mainTable = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        teamTable = new javax.swing.JTable();
        queryCombo = new javax.swing.JComboBox<>();
        queryAddColumn = new javax.swing.JButton();
        matchOpenButton = new javax.swing.JButton();
        resetColumns = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Sheets for Team " + introTeamFinal);

        mainPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        mainPanel.setPreferredSize(new java.awt.Dimension(800, 600));

        mainTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Scouter Name", "Team #", "Match #", "Grand Total Points", "Overall Performance", "Driving System", "Driving System Functionality", "Mover System", "Mover System Functionality", "Foul Points", "Additional Comments", "Autonomous Points", "Teleoperation Points", "Coopertition Points"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(mainTable);

        teamTable.setAutoCreateRowSorter(true);
        teamTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Match #", "Scouter name", "Score", "Won"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.Integer.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        teamTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                teamTableMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(teamTable);

        queryCombo.setFont(new java.awt.Font("Roboto", 0, 11)); // NOI18N
        queryCombo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "-" }));
        queryCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                queryComboActionPerformed(evt);
            }
        });

        queryAddColumn.setFont(new java.awt.Font("Roboto", 0, 11)); // NOI18N
        queryAddColumn.setText("Add Column");
        queryAddColumn.setEnabled(false);
        queryAddColumn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                queryAddColumnActionPerformed(evt);
            }
        });

        matchOpenButton.setFont(new java.awt.Font("Roboto", 0, 11)); // NOI18N
        matchOpenButton.setText("Open Match Sheet");
        matchOpenButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                matchOpenButtonActionPerformed(evt);
            }
        });

        resetColumns.setFont(new java.awt.Font("Roboto", 0, 11)); // NOI18N
        resetColumns.setText("Reset Columns");
        resetColumns.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resetColumnsActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout mainPanelLayout = new javax.swing.GroupLayout(mainPanel);
        mainPanel.setLayout(mainPanelLayout);
        mainPanelLayout.setHorizontalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mainPanelLayout.createSequentialGroup()
                .addGap(627, 627, 627)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 157, Short.MAX_VALUE)
                .addGap(12, 12, 12))
            .addGroup(mainPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2)
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, mainPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(matchOpenButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(resetColumns)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(queryCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(queryAddColumn)
                .addContainerGap())
        );
        mainPanelLayout.setVerticalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, mainPanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(queryCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(queryAddColumn)
                    .addComponent(matchOpenButton)
                    .addComponent(resetColumns))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 541, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(586, 586, 586))
        );

        setVisible(false);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addComponent(mainPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(mainPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void teamTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_teamTableMouseClicked
        
    }//GEN-LAST:event_teamTableMouseClicked

    private void queryAddColumnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_queryAddColumnActionPerformed
        DefaultTableModel teamModel = (DefaultTableModel) teamTable.getModel();
        
        TableColumnModel columns = teamTable.getColumnModel();
        TableColumn c = new TableColumn();
        c.setHeaderValue(queryCombo.getSelectedItem().toString());
        columnsAdded++;
        String columnNamesArray[] = new String[columns.getColumnCount() + 1]; 
        final Class columnTypesArray[] = new Class[columns.getColumnCount() + 1];
        final boolean columnCanEdit[] = new boolean[columns.getColumnCount() + 1];
        
        Template template = new Template();
        Parser parse = new Parser();   
        
        int i = 0;
        for (i = 0; i < columns.getColumnCount(); i++) 
        {
            columnNamesArray[i] = columns.getColumn(i).getHeaderValue().toString();
            columnTypesArray[i] = teamTable.getColumnClass(i);
            columnCanEdit[i] = false;
        }
        columnNamesArray[i] = queryCombo.getSelectedItem().toString();
        
        try 
        {
            if (parse.queryFind(null, template.templateStr, queryCombo.getSelectedItem().toString(), true).equals("INTEGER"))
                columnTypesArray[i] = java.lang.Integer.class;
            else
                columnTypesArray[i] = java.lang.String.class;
        } 
        
        catch (FileNotFoundException ex) 
        {
            System.out.println("File not found.");
        }
       
        try 
        {
            columns.addColumn(c);
            teamTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
                    columnNamesArray)
            {
                Class[] types = columnTypesArray;
                boolean[] canEdit = columnCanEdit;

                public Class getColumnClass(int columnIndex) 
                {
                    return types [columnIndex];
                }

                public boolean isCellEditable(int rowIndex, int columnIndex) 
                {
                    return canEdit [columnIndex];
                }
            } );
            parse.expandTable(introTeamFinal, teamTable, true);
            
        } 
        catch (IOException ex) 
        {
            System.out.println("Error");
        }
        
    }//GEN-LAST:event_queryAddColumnActionPerformed

    private void matchOpenButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_matchOpenButtonActionPerformed
        DefaultTableModel teamModel = (DefaultTableModel) teamTable.getModel();
        int selRow = teamTable.getSelectedRow();
        int fileIndex = 0;

        File[] files = new File("./Sheets").listFiles();

        if (files != null)
        {
            // goes through all files and searches for scout sheets for specific team
            for (File file:files)
            {
                String wholeString = file.getName();
                if (!file.isDirectory() && wholeString.startsWith("ScoutSheet-" +
                    String.valueOf(introTeamFinal)))
                {
                    if (fileIndex == selRow)
                    {
                        try
                        {
                            Desktop.getDesktop().open(file);
                            break;
                        }
                        catch (IOException ex)
                        {
                            System.out.println("File not found");
                        }
                    }
                    else
                    {
                        fileIndex++;
                    }
                }
            }
        }
    }//GEN-LAST:event_matchOpenButtonActionPerformed

    private void resetColumnsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resetColumnsActionPerformed
        
        // doesn't change actual table model, as the default ones aren't changed
        // if this changes at any time then your problem is right here
        
        TableColumnModel columns = teamTable.getColumnModel();
        TableColumn c = new TableColumn();
        c.setHeaderValue(queryCombo.getSelectedItem().toString());
        
        
        Parser parse = new Parser();
        for (int i = 0; i < columnsAdded; i++) 
            columns.removeColumn(columns.getColumn(columns.getColumnCount()-1));
        columnsAdded = 0;
            try { 
                parse.expandTable(introTeamFinal, teamTable, true);
            } catch (IOException ex) {
                System.out.println("Error (IO)");
            }
         
    }//GEN-LAST:event_resetColumnsActionPerformed

    private void queryComboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_queryComboActionPerformed
        if (queryCombo.getSelectedIndex() == 0)
        {
            queryAddColumn.setEnabled(false);
        }
        else
        {
            queryAddColumn.setEnabled(true);
        }
    }//GEN-LAST:event_queryComboActionPerformed
        
    public void tableSet(int introTeam) throws FileNotFoundException, IOException {
    
        Parser parse = new Parser();
        parse.expandTable(introTeam, teamTable, false);
        parse.comboSet(queryCombo);
    }
    
    public static void main(String args[]) {
        
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JPanel mainPanel;
    private javax.swing.JTable mainTable;
    private javax.swing.JButton matchOpenButton;
    private javax.swing.JButton queryAddColumn;
    private javax.swing.JComboBox<String> queryCombo;
    private javax.swing.JButton resetColumns;
    private javax.swing.JTable teamTable;
    // End of variables declaration//GEN-END:variables
}
