package scouting2016;
import java.awt.Dimension;
import java.awt.Toolkit;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import javax.swing.UIManager;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Adam Frick
 */
public class FormMatch extends javax.swing.JFrame {

//  variables
    
    // autonomous
    private String autoDefenseString = "";
    private boolean autoReachesCheck = false;
    private boolean autoCrossesCheck = false;
    private boolean autoLowCheck = false;
    private boolean autoHighCheck = false;
    
    // end game
    private boolean endChallengedCheck = false;
    private boolean endClimbedCheck = false;
    
    // teleop
    private String teleopDefenseString = "";
    private boolean teleopCrossCheck = false;
    private boolean teleopAnotherCheck = false;
    private int teleopRowCount = 0;
    private int teleopColumnCount = 0;
    private int teleopLowInt = 0;
    private int teleopHighInt = 0;
    private int teleopTimesInt = 0;
    
    
    DefaultTableModel model;
    
    // wellness
    private String wellPerformanceString = "";
    private String wellDriveString = "";
    private String wellDriveFunctionalityString = "";

    private String wellCommentsString = "";
    private boolean wellFoulCheck = false;
    private String wellFoulResultString = "";
    private String wellShootingString = "";
    private String wellShootingFunctionalityString = "";
    
    
    // option
    private String optionsScouterString = "";
    private int optionsTeamInt = 0;
    private int optionsMatchInt = 0;
    private int optionsScoreInt = 0;
    private boolean optionsWinCheck = false;
    
    //other
    long optionsSaveInt = 0;
    
    public FormMatch()
    {
        // sets up teleop table
        this.model = new javax.swing.table.DefaultTableModel();
   
        try    
        {
            // sets look and feel to windows
            UIManager.setLookAndFeel
            ("javax.swing.plaf.metal.MetalLookAndFeel");
        } 
    
        catch(Exception e)    
        {
            // the user must be aware!
            // look and feel may be unsupported by platform
            JOptionPane.showMessageDialog(null,
            "The Scouting UI cannot be properly initialized. \n"
                + "The program will execute, but it may not "
                + "appear or function as intended.",
            "Error",
            JOptionPane.ERROR_MESSAGE);
        }

        // initializes functionality
        initComponents();
    
        // sets window to center of screen
        Dimension dim = Toolkit.getDefaultToolkit().getScreenSize();
        double width = dim.getWidth();
        double height = dim.getHeight();
    
        // sets window to center of screen
        setLocation(dim.width/2-this.getSize().width/2, dim.height/2-this.getSize().height/2);
    
    
        // window is made visible
        setVisible(true);
    }

 
  
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        mainPanel = new javax.swing.JPanel();
        wellPanel = new javax.swing.JPanel();
        wellCommentsLabel = new javax.swing.JLabel();
        wellPerformanceLabel = new javax.swing.JLabel();
        wellPerformance = new javax.swing.JComboBox();
        wellDrivePanel = new javax.swing.JPanel();
        wellDriveLabel = new javax.swing.JLabel();
        wellDrive = new javax.swing.JComboBox();
        wellDriveFunctionality = new javax.swing.JComboBox();
        wellDriveFunctionalityLabel = new javax.swing.JLabel();
        wellFoulPanel = new javax.swing.JPanel();
        wellFoulLabel = new javax.swing.JLabel();
        wellFoulResult = new javax.swing.JComboBox<>();
        wellFoul = new javax.swing.JCheckBox();
        jScrollPane1 = new javax.swing.JScrollPane();
        wellComments = new javax.swing.JTextArea();
        wellDrivePanel2 = new javax.swing.JPanel();
        wellShootingLabel = new javax.swing.JLabel();
        wellShooting = new javax.swing.JComboBox();
        wellShootingFunctionality = new javax.swing.JComboBox();
        wellShootingFunctionalityLabel = new javax.swing.JLabel();
        teleopPanel = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        teleopTable = new javax.swing.JTable(model);
        teleopSubmitPanel = new javax.swing.JPanel();
        teleopSubmit = new javax.swing.JButton();
        teleopCross = new javax.swing.JCheckBox();
        teleopAnother = new javax.swing.JCheckBox();
        teleopDefense = new javax.swing.JComboBox<>();
        teleopTimes = new javax.swing.JSpinner();
        teleopTimesLabel = new javax.swing.JLabel();
        teleopDelete = new javax.swing.JButton();
        teleopLow = new javax.swing.JSpinner();
        teleopLowLabel = new javax.swing.JLabel();
        teleopHigh = new javax.swing.JSpinner();
        teleopHighLabel = new javax.swing.JLabel();
        autoPanel = new javax.swing.JPanel();
        autoHigh = new javax.swing.JCheckBox();
        autoLow = new javax.swing.JCheckBox();
        wellFoulPanel1 = new javax.swing.JPanel();
        wellFoulLabel1 = new javax.swing.JLabel();
        autoDefense = new javax.swing.JComboBox<>();
        optionsOverrideLabel1 = new javax.swing.JLabel();
        autoReaches = new javax.swing.JCheckBox();
        autoCrosses = new javax.swing.JCheckBox();
        optionsPanel = new javax.swing.JPanel();
        optionsScouter = new java.awt.TextField();
        optionsScouterLabel = new javax.swing.JLabel();
        optionsTeamLabel = new javax.swing.JLabel();
        optionsTeam = new java.awt.TextField();
        optionsMatchLabel = new javax.swing.JLabel();
        optionsMatch = new java.awt.TextField();
        optionsHelp = new javax.swing.JButton();
        optionsSave = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        optionsClear = new javax.swing.JButton();
        optionsScoreLabel = new javax.swing.JLabel();
        optionsScore = new javax.swing.JSpinner();
        optionsWin = new javax.swing.JCheckBox();
        endPanel = new javax.swing.JPanel();
        endChallenged = new javax.swing.JCheckBox();
        endClimbed = new javax.swing.JCheckBox();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Match Sheet");
        setBackground(new java.awt.Color(0, 0, 0));
        setFocusCycleRoot(false);
        setForeground(new java.awt.Color(0, 0, 0));
        setLocationByPlatform(true);
        setMinimumSize(new java.awt.Dimension(828, 648));

        mainPanel.setMaximumSize(new java.awt.Dimension(820, 618));
        mainPanel.setMinimumSize(new java.awt.Dimension(820, 618));
        mainPanel.setName("mainPanel"); // NOI18N
        mainPanel.setRequestFocusEnabled(false);

        wellPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Robot Wellness", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", 1, 12))); // NOI18N
        wellPanel.setPreferredSize(new java.awt.Dimension(545, 195));

        wellCommentsLabel.setText("Additional Comments");

        wellPerformanceLabel.setText("Overall Performance");

        wellPerformance.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "-", "Poor", "Okay", "Good", "Excellent" }));
        wellPerformance.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                wellPerformanceActionPerformed(evt);
            }
        });

        wellDrivePanel.setBorder(javax.swing.BorderFactory.createTitledBorder(""));

        wellDriveLabel.setText("Drive Train");

        wellDrive.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "-", "Tank Drive", "Turns Freely", "Turns On Point", "Other" }));
        wellDrive.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                wellDriveActionPerformed(evt);
            }
        });

        wellDriveFunctionality.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "-", "Poor", "Okay", "Good", "Excellent" }));
        wellDriveFunctionality.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                wellDriveFunctionalityActionPerformed(evt);
            }
        });

        wellDriveFunctionalityLabel.setText("Functionality");

        javax.swing.GroupLayout wellDrivePanelLayout = new javax.swing.GroupLayout(wellDrivePanel);
        wellDrivePanel.setLayout(wellDrivePanelLayout);
        wellDrivePanelLayout.setHorizontalGroup(
            wellDrivePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(wellDrivePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(wellDrivePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(wellDriveLabel, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(wellDriveFunctionalityLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 26, Short.MAX_VALUE)
                .addGroup(wellDrivePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(wellDrive, 0, 128, Short.MAX_VALUE)
                    .addComponent(wellDriveFunctionality, 0, 128, Short.MAX_VALUE))
                .addGap(20, 20, 20))
        );
        wellDrivePanelLayout.setVerticalGroup(
            wellDrivePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, wellDrivePanelLayout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addGroup(wellDrivePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(wellDriveLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(wellDrive, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(wellDrivePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(wellDriveFunctionalityLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(wellDriveFunctionality, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        wellFoulPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(""));

        wellFoulLabel.setText("Result");
        wellFoulLabel.setEnabled(false);

        wellFoulResult.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "-", "Point Deduction", "Yellow Card", "Red Card" }));
        wellFoulResult.setEnabled(false);
        wellFoulResult.setMinimumSize(new java.awt.Dimension(71, 21));
        wellFoulResult.setPreferredSize(new java.awt.Dimension(71, 21));
        wellFoulResult.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                wellFoulResultActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout wellFoulPanelLayout = new javax.swing.GroupLayout(wellFoulPanel);
        wellFoulPanel.setLayout(wellFoulPanelLayout);
        wellFoulPanelLayout.setHorizontalGroup(
            wellFoulPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, wellFoulPanelLayout.createSequentialGroup()
                .addComponent(wellFoulLabel)
                .addGap(34, 34, 34)
                .addComponent(wellFoulResult, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        wellFoulPanelLayout.setVerticalGroup(
            wellFoulPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(wellFoulPanelLayout.createSequentialGroup()
                .addGap(6, 6, 6)
                .addGroup(wellFoulPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(wellFoulLabel)
                    .addComponent(wellFoulResult, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        wellFoul.setText("Foul");
        wellFoul.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                wellFoulActionPerformed(evt);
            }
        });

        wellComments.setColumns(20);
        wellComments.setLineWrap(true);
        wellComments.setRows(3);
        wellComments.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                wellCommentsKeyTyped(evt);
            }
        });
        jScrollPane1.setViewportView(wellComments);

        wellDrivePanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(""));

        wellShootingLabel.setText("Shooting");

        wellShooting.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "-", "Low Goal", "High Goal" }));
        wellShooting.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                wellShootingActionPerformed(evt);
            }
        });

        wellShootingFunctionality.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "-", "Poor", "Okay", "Good", "Excellent" }));
        wellShootingFunctionality.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                wellShootingFunctionalityActionPerformed(evt);
            }
        });

        wellShootingFunctionalityLabel.setText("Functionality");

        javax.swing.GroupLayout wellDrivePanel2Layout = new javax.swing.GroupLayout(wellDrivePanel2);
        wellDrivePanel2.setLayout(wellDrivePanel2Layout);
        wellDrivePanel2Layout.setHorizontalGroup(
            wellDrivePanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(wellDrivePanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(wellDrivePanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(wellShootingLabel, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(wellShootingFunctionalityLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 26, Short.MAX_VALUE)
                .addGroup(wellDrivePanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(wellShooting, 0, 128, Short.MAX_VALUE)
                    .addComponent(wellShootingFunctionality, 0, 128, Short.MAX_VALUE))
                .addGap(20, 20, 20))
        );
        wellDrivePanel2Layout.setVerticalGroup(
            wellDrivePanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, wellDrivePanel2Layout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addGroup(wellDrivePanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(wellShootingLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(wellShooting, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(wellDrivePanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(wellShootingFunctionalityLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(wellShootingFunctionality, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout wellPanelLayout = new javax.swing.GroupLayout(wellPanel);
        wellPanel.setLayout(wellPanelLayout);
        wellPanelLayout.setHorizontalGroup(
            wellPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(wellPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(wellPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(wellPanelLayout.createSequentialGroup()
                        .addComponent(wellFoul)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(wellFoulPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(wellPanelLayout.createSequentialGroup()
                        .addComponent(wellPerformanceLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(wellPerformance, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(wellCommentsLabel)
                    .addComponent(jScrollPane1))
                .addGap(31, 31, 31)
                .addGroup(wellPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(wellDrivePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(wellDrivePanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        wellPanelLayout.setVerticalGroup(
            wellPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(wellPanelLayout.createSequentialGroup()
                .addGroup(wellPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, wellPanelLayout.createSequentialGroup()
                        .addGroup(wellPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(wellPerformance, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(wellPerformanceLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(12, 12, 12)
                        .addGroup(wellPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(wellFoul, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(wellFoulPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(5, 5, 5)
                        .addComponent(wellCommentsLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, wellPanelLayout.createSequentialGroup()
                        .addComponent(wellDrivePanel, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(wellDrivePanel2, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );

        teleopPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Teleoperation", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", 1, 12))); // NOI18N
        teleopPanel.setPreferredSize(new java.awt.Dimension(395, 395));

        teleopTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Defense", "Crosses", "Helps Another", "Times"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Boolean.class, java.lang.Boolean.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                false, true, true, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        teleopTable.setMinimumSize(new java.awt.Dimension(75, 110));
        teleopTable.setName(""); // NOI18N
        jScrollPane2.setViewportView(teleopTable);
        if (teleopTable.getColumnModel().getColumnCount() > 0) {
            teleopTable.getColumnModel().getColumn(0).setResizable(false);
            teleopTable.getColumnModel().getColumn(1).setResizable(false);
            teleopTable.getColumnModel().getColumn(2).setResizable(false);
            teleopTable.getColumnModel().getColumn(3).setResizable(false);
        }

        teleopSubmitPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        teleopSubmitPanel.setPreferredSize(new java.awt.Dimension(0, 191));

        teleopSubmit.setText("Submit");
        teleopSubmit.setEnabled(false);
        teleopSubmit.setMaximumSize(new java.awt.Dimension(80, 27));
        teleopSubmit.setMinimumSize(new java.awt.Dimension(80, 27));
        teleopSubmit.setPreferredSize(new java.awt.Dimension(80, 27));
        teleopSubmit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                teleopSubmitActionPerformed(evt);
            }
        });

        teleopCross.setFont(new java.awt.Font("Roboto", 0, 11)); // NOI18N
        teleopCross.setText("Able to Cross");
        teleopCross.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        teleopCross.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                teleopCrossActionPerformed(evt);
            }
        });

        teleopAnother.setFont(new java.awt.Font("Roboto", 0, 11)); // NOI18N
        teleopAnother.setText("Helps Another Cross");
        teleopAnother.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        teleopAnother.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                teleopAnotherActionPerformed(evt);
            }
        });

        teleopDefense.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "-", "Portcullis", "Cheval de Frise", "Moat", "Rampart", "Drawbridge", "Sally Port", "Rock Wall", "Rough Terrain", "Low Bar" }));
        teleopDefense.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                teleopDefenseActionPerformed(evt);
            }
        });

        teleopTimes.setModel(new javax.swing.SpinnerNumberModel(0, 0, 99, 1));
        teleopTimes.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                teleopTimesStateChanged(evt);
            }
        });

        teleopTimesLabel.setFont(new java.awt.Font("Roboto", 0, 11)); // NOI18N
        teleopTimesLabel.setText("Times");

        javax.swing.GroupLayout teleopSubmitPanelLayout = new javax.swing.GroupLayout(teleopSubmitPanel);
        teleopSubmitPanel.setLayout(teleopSubmitPanelLayout);
        teleopSubmitPanelLayout.setHorizontalGroup(
            teleopSubmitPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(teleopSubmitPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(teleopSubmitPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(teleopDefense, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(teleopAnother)
                    .addComponent(teleopCross))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 15, Short.MAX_VALUE)
                .addGroup(teleopSubmitPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(teleopSubmit, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(teleopSubmitPanelLayout.createSequentialGroup()
                        .addComponent(teleopTimes, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(6, 6, 6)
                        .addComponent(teleopTimesLabel)))
                .addContainerGap())
        );
        teleopSubmitPanelLayout.setVerticalGroup(
            teleopSubmitPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, teleopSubmitPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(teleopSubmitPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(teleopDefense, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(teleopSubmit, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(teleopSubmitPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(teleopCross)
                    .addComponent(teleopTimes, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(teleopTimesLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(teleopAnother, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(14, 14, 14))
        );

        teleopDelete.setText("Delete");
        teleopDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                teleopDeleteActionPerformed(evt);
            }
        });

        teleopLow.setModel(new javax.swing.SpinnerNumberModel(0, 0, 99, 1));
        teleopLow.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                teleopLowStateChanged(evt);
            }
        });

        teleopLowLabel.setFont(new java.awt.Font("Roboto", 0, 11)); // NOI18N
        teleopLowLabel.setText("Low Goals");

        teleopHigh.setModel(new javax.swing.SpinnerNumberModel(0, 0, 99, 1));
        teleopHigh.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                teleopHighStateChanged(evt);
            }
        });

        teleopHighLabel.setFont(new java.awt.Font("Roboto", 0, 11)); // NOI18N
        teleopHighLabel.setText("High Goals");

        javax.swing.GroupLayout teleopPanelLayout = new javax.swing.GroupLayout(teleopPanel);
        teleopPanel.setLayout(teleopPanelLayout);
        teleopPanelLayout.setHorizontalGroup(
            teleopPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(teleopPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(teleopPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(teleopPanelLayout.createSequentialGroup()
                        .addComponent(teleopSubmitPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 255, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(8, 8, 8)
                        .addGroup(teleopPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(teleopPanelLayout.createSequentialGroup()
                                .addComponent(teleopLowLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(teleopPanelLayout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(teleopHighLabel)
                                .addGap(8, 8, 8)))
                        .addGroup(teleopPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(teleopPanelLayout.createSequentialGroup()
                                .addComponent(teleopLow, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(teleopPanelLayout.createSequentialGroup()
                                .addComponent(teleopHigh, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(37, 37, 37))))
                    .addGroup(teleopPanelLayout.createSequentialGroup()
                        .addGroup(teleopPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(teleopDelete)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 356, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(33, 33, 33))))
        );
        teleopPanelLayout.setVerticalGroup(
            teleopPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(teleopPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 204, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(teleopDelete)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(teleopPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(teleopSubmitPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(teleopPanelLayout.createSequentialGroup()
                        .addGroup(teleopPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(teleopLow, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(teleopLowLabel))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(teleopPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(teleopHigh, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(teleopHighLabel))))
                .addContainerGap())
        );

        autoPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Autonomous", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", 1, 12))); // NOI18N
        autoPanel.setPreferredSize(new java.awt.Dimension(245, 195));

        autoHigh.setText("Scores High Goal");
        autoHigh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                autoHighActionPerformed(evt);
            }
        });

        autoLow.setText("Scores Low Goal");
        autoLow.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                autoLowActionPerformed(evt);
            }
        });

        wellFoulPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(""));

        wellFoulLabel1.setEnabled(false);

        autoDefense.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "-", "Portcullis", "Cheval de Frise", "Moat", "Rampart", "Drawbridge", "Sally Port", "Rock Wall", "Rough Terrain", "Low Bar" }));
        autoDefense.setEnabled(false);
        autoDefense.setMinimumSize(new java.awt.Dimension(71, 21));
        autoDefense.setPreferredSize(new java.awt.Dimension(71, 21));
        autoDefense.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                autoDefenseActionPerformed(evt);
            }
        });

        optionsOverrideLabel1.setText("Defense:");

        autoReaches.setText("Reaches");
        autoReaches.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                autoReachesActionPerformed(evt);
            }
        });

        autoCrosses.setText("Crosses");
        autoCrosses.setEnabled(false);
        autoCrosses.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                autoCrossesActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout wellFoulPanel1Layout = new javax.swing.GroupLayout(wellFoulPanel1);
        wellFoulPanel1.setLayout(wellFoulPanel1Layout);
        wellFoulPanel1Layout.setHorizontalGroup(
            wellFoulPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(wellFoulPanel1Layout.createSequentialGroup()
                .addComponent(optionsOverrideLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(wellFoulLabel1)
                .addGap(85, 85, 85))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, wellFoulPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(wellFoulPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(autoReaches)
                    .addGroup(wellFoulPanel1Layout.createSequentialGroup()
                        .addComponent(autoCrosses)
                        .addGap(20, 20, 20)
                        .addComponent(autoDefense, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
        );
        wellFoulPanel1Layout.setVerticalGroup(
            wellFoulPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(wellFoulPanel1Layout.createSequentialGroup()
                .addGroup(wellFoulPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(wellFoulPanel1Layout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addComponent(wellFoulLabel1))
                    .addComponent(optionsOverrideLabel1))
                .addGroup(wellFoulPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(wellFoulPanel1Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(autoReaches)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(autoCrosses)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(wellFoulPanel1Layout.createSequentialGroup()
                        .addGap(16, 16, 16)
                        .addComponent(autoDefense, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );

        javax.swing.GroupLayout autoPanelLayout = new javax.swing.GroupLayout(autoPanel);
        autoPanel.setLayout(autoPanelLayout);
        autoPanelLayout.setHorizontalGroup(
            autoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(autoPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(autoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(autoPanelLayout.createSequentialGroup()
                        .addComponent(autoLow)
                        .addContainerGap(108, Short.MAX_VALUE))
                    .addGroup(autoPanelLayout.createSequentialGroup()
                        .addComponent(autoHigh)
                        .addGap(0, 104, Short.MAX_VALUE))))
            .addComponent(wellFoulPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        autoPanelLayout.setVerticalGroup(
            autoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(autoPanelLayout.createSequentialGroup()
                .addGap(8, 8, 8)
                .addComponent(wellFoulPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(12, 12, 12)
                .addComponent(autoLow)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(autoHigh, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        optionsPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Options", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", 1, 12))); // NOI18N
        optionsPanel.setPreferredSize(new java.awt.Dimension(0, 245));

        optionsScouter.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                optionsScouterKeyReleased(evt);
            }
        });

        optionsScouterLabel.setText("Scouter name");

        optionsTeamLabel.setText("Team #");

        optionsTeam.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                optionsTeamActionPerformed(evt);
            }
        });
        optionsTeam.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                optionsTeamKeyReleased(evt);
            }
        });

        optionsMatchLabel.setText("Match #");

        optionsMatch.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                optionsMatchKeyReleased(evt);
            }
        });

        optionsHelp.setText("Scoring Info");
        optionsHelp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                optionsHelpActionPerformed(evt);
            }
        });

        optionsSave.setFont(new java.awt.Font("Segoe UI", 1, 11)); // NOI18N
        optionsSave.setText("Save");
        optionsSave.setEnabled(false);
        optionsSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                optionsSaveActionPerformed(evt);
            }
        });

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(""));

        jLabel1.setForeground(new java.awt.Color(255, 0, 0));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Clear");
        jLabel1.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

        optionsClear.setText("-");
        optionsClear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                optionsClearActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(optionsClear)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jLabel1)
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(optionsClear, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        optionsScoreLabel.setText("Score");

        optionsScore.setModel(new javax.swing.SpinnerNumberModel(0, 0, 999, 1));
        optionsScore.setValue(0);
        optionsScore.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                optionsScoreStateChanged(evt);
            }
        });

        optionsWin.setText("Won");
        optionsWin.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        optionsWin.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);
        optionsWin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                optionsWinActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout optionsPanelLayout = new javax.swing.GroupLayout(optionsPanel);
        optionsPanel.setLayout(optionsPanelLayout);
        optionsPanelLayout.setHorizontalGroup(
            optionsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(optionsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(optionsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, optionsPanelLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(optionsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(optionsPanelLayout.createSequentialGroup()
                                .addComponent(optionsScouterLabel)
                                .addGroup(optionsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(optionsPanelLayout.createSequentialGroup()
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(optionsScouter, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(optionsPanelLayout.createSequentialGroup()
                                        .addGap(39, 39, 39)
                                        .addComponent(optionsTeamLabel)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(optionsTeam, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                            .addGroup(optionsPanelLayout.createSequentialGroup()
                                .addComponent(optionsMatchLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(optionsMatch, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(optionsPanelLayout.createSequentialGroup()
                        .addGroup(optionsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(optionsPanelLayout.createSequentialGroup()
                                .addComponent(optionsSave)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(optionsHelp))
                            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(optionsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, optionsPanelLayout.createSequentialGroup()
                                .addComponent(optionsScoreLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(optionsScore, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(optionsWin, javax.swing.GroupLayout.Alignment.TRAILING))))
                .addContainerGap())
        );
        optionsPanelLayout.setVerticalGroup(
            optionsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, optionsPanelLayout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(optionsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(optionsScouter, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(optionsScouterLabel))
                .addGap(13, 13, 13)
                .addGroup(optionsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(optionsTeam, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(optionsTeamLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(optionsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(optionsMatchLabel)
                    .addComponent(optionsMatch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 27, Short.MAX_VALUE)
                .addGroup(optionsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(optionsPanelLayout.createSequentialGroup()
                        .addGroup(optionsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(optionsHelp)
                            .addComponent(optionsSave))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(optionsPanelLayout.createSequentialGroup()
                        .addGroup(optionsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(optionsScoreLabel)
                            .addComponent(optionsScore, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(optionsWin)
                        .addGap(5, 5, 5)))
                .addGap(7, 7, 7))
        );

        endPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "End Game", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", 1, 12))); // NOI18N
        endPanel.setPreferredSize(new java.awt.Dimension(395, 145));

        endChallenged.setText("Challenged Tower");
        endChallenged.setDoubleBuffered(true);
        endChallenged.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                endChallengedActionPerformed(evt);
                coopPerformed(evt);
                pointsChanged(evt);
            }
        });

        endClimbed.setText("Climbed Tower");
        endClimbed.setEnabled(false);
        endClimbed.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                endClimbedActionPerformed(evt);
                coopPerformed(evt);
                pointsChanged(evt);
            }
        });

        javax.swing.GroupLayout endPanelLayout = new javax.swing.GroupLayout(endPanel);
        endPanel.setLayout(endPanelLayout);
        endPanelLayout.setHorizontalGroup(
            endPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(endPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(endPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(endChallenged)
                    .addComponent(endClimbed))
                .addContainerGap(250, Short.MAX_VALUE))
        );
        endPanelLayout.setVerticalGroup(
            endPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(endPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(endChallenged)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(endClimbed)
                .addContainerGap(58, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout mainPanelLayout = new javax.swing.GroupLayout(mainPanel);
        mainPanel.setLayout(mainPanelLayout);
        mainPanelLayout.setHorizontalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mainPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(mainPanelLayout.createSequentialGroup()
                        .addComponent(autoPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(wellPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(mainPanelLayout.createSequentialGroup()
                        .addComponent(teleopPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(endPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(optionsPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 395, Short.MAX_VALUE))))
                .addContainerGap())
        );
        mainPanelLayout.setVerticalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mainPanelLayout.createSequentialGroup()
                .addGap(6, 6, 6)
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(autoPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(wellPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(10, 10, 10)
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(teleopPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(mainPanelLayout.createSequentialGroup()
                        .addComponent(endPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(10, 10, 10)
                        .addComponent(optionsPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 240, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        wellPanel.getAccessibleContext().setAccessibleDescription("");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(mainPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(mainPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void autoHighActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_autoHighActionPerformed
        autoChanged();            
    }//GEN-LAST:event_autoHighActionPerformed

    private void autoLowActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_autoLowActionPerformed
        autoChanged();        
    }//GEN-LAST:event_autoLowActionPerformed

    private void endClimbedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_endClimbedActionPerformed
        endChanged();
    }//GEN-LAST:event_endClimbedActionPerformed

    private void endChallengedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_endChallengedActionPerformed
        endChanged();
    }//GEN-LAST:event_endChallengedActionPerformed

    private void optionsSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_optionsSaveActionPerformed
        // could use for unique file names
        // optionsSaveInt = System.currentTimeMillis();
        
        teleopRowCount = teleopTable.getRowCount();
        teleopColumnCount = teleopTable.getColumnCount();

        if (wellCommentsString.isEmpty()) {
            wellCommentsString = "-";
        }
        
        String text="General Info\n" +
                    "\t" + optionsScouterLabel.getText() + ": " + optionsScouterString + "\n" +
                    "\t" + optionsTeamLabel.getText() + ": " + optionsTeamInt + "\n" +
                    "\t" + optionsMatchLabel.getText() + ": " + optionsMatchInt + "\n" +
                    "\t" + optionsScoreLabel.getText() + ": " + optionsScoreInt + "\n" +
                    "\t" + optionsWin.getText() + ": " + optionsWinCheck + "\n\n" +
                    "Autonomous Info\n" +
                    "\t" + "Auto Defense: " + autoDefense.getSelectedItem() + "\n" +
                    "\t" + "Auto " + autoReaches.getText() + ": " + autoReachesCheck + "\n" +
                    "\t" + "Auto " + autoCrosses.getText() + ": " + autoCrossesCheck + "\n" +
                    "\t" + "Auto " + autoLow.getText() + ": " + autoLowCheck + "\n" +
                    "\t" + "Auto" + autoHigh.getText() + ": " + autoHighCheck + "\n\n" + 
                    "Wellness Info\n" +
                    "\t" + wellPerformanceLabel.getText() + ": " + wellPerformanceString + "\n" +
                    "\t" + wellDriveLabel.getText() + ": " + wellDriveString + "\n" +
                    "\t\t" + wellDriveLabel.getText() +  " " + 
                        wellDriveFunctionalityLabel.getText() + ": " + wellDriveFunctionalityString + "\n" +
                    "\t" + wellShootingLabel.getText() + ": " + wellShootingString + "\n" + 
                    "\t\t" + wellShootingLabel.getText() + " " + 
                            wellShootingFunctionalityLabel.getText() + ": " + wellShootingFunctionalityString + "\n" + 
                    "\t" + wellFoul.getText() + ": " + wellFoulCheck + "\n" + 
                    "\t" + "Foul " + wellFoulLabel.getText() + ": " + wellFoulResultString + "\n" +
                    "\t" + wellCommentsLabel.getText() + ": " + wellCommentsString + "\n\n" +
                    "End Game Info\n" +
                    "\t" + endChallenged.getText() + ": " + endChallengedCheck + "\n" +
                    "\t" + endClimbed.getText() + ": " + endClimbedCheck + "\n\n" +
                    "Teleoperation Info\n" +
                    "\t" + teleopLowLabel.getText() + ": " + teleopLowInt + "\n" +
                    "\t" + teleopHighLabel.getText() + ": " + teleopHighInt + "\n" +
                    "\tTable:\n"
                    ;
        
        for (int i = 0; i < teleopRowCount; ++i)
        {
            text = text.concat("\t");
            
            for (int j = 0; j < teleopColumnCount; ++j) 
            {
                switch (j)
                {
                    case 0:
                        text = text.concat("Defense: ");
                        break;
                    case 1:
                        text = text.concat("Crosses: ");
                        break;
                    case 2:
                        text = text.concat("Helps another: ");
                        break;
                    case 3:
                        text = text.concat("Times: ");
                }
                text = text.concat(teleopTable.getModel().getValueAt(i, j).toString()); 
                if (j < (teleopColumnCount -1) )
                    text = text.concat(" || ");
                
            }
            text = text.concat("\n");
        }
        
        text = text.concat("\nEnd");
        
        try 
            
        {
            // writes data sheet to file
            File scoutFile = new File("Sheets/ScoutSheet-" + optionsTeamInt + "-" + optionsMatchInt + "-" + optionsScouterString + ".txt");
            BufferedWriter output = new BufferedWriter(new FileWriter(scoutFile));
            output.write(text);
            output.close();
          
            JOptionPane.showMessageDialog(null,
            "Your sheet has been saved",
            "Success",
            JOptionPane.DEFAULT_OPTION);
        }
        catch ( IOException e )
        {
            JOptionPane.showMessageDialog(null,
            "Error saving sheet.\nDetails:\n" + System.err,
            "Error",
            JOptionPane.ERROR_MESSAGE);  
        }        
        
        clearEverything();
    }//GEN-LAST:event_optionsSaveActionPerformed

    private void optionsHelpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_optionsHelpActionPerformed
 
        JOptionPane.showMessageDialog(null, 
                "\tA robot reaches the outer works in autonomous if anything, even a bumper,\n"
              + "is over the outer works. Crossing in autonomous is when the entire robot\n"
              + "is out of the outer works after having crossed one. If even a bumper is\n"
              + "over the outer works, it is qualified as \"reaching\".\n\n" 
              + "\tIn tele-op, crossing a defense only counts in going from the middle\n"
              + "ground to the other team's courtyard. You can only get points from\n"
              + "crossing a defense twice.\n\n"
              + "\tChallenging in End Game is if any part of the robot is over the bottom of\n"
              + "the tower. Climbing means the robot is entirely above the low goal.\n"
                , "Scouting Info", JOptionPane.PLAIN_MESSAGE);
        
    }//GEN-LAST:event_optionsHelpActionPerformed

    private void optionsTeamActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_optionsTeamActionPerformed
        optionsChanged();
    }//GEN-LAST:event_optionsTeamActionPerformed

    private void wellFoulActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_wellFoulActionPerformed
        wellChanged();
    }//GEN-LAST:event_wellFoulActionPerformed

    private void wellDriveFunctionalityActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_wellDriveFunctionalityActionPerformed
        wellChanged();
    }//GEN-LAST:event_wellDriveFunctionalityActionPerformed

    private void wellDriveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_wellDriveActionPerformed
        wellChanged();
    }//GEN-LAST:event_wellDriveActionPerformed

    private void wellPerformanceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_wellPerformanceActionPerformed
        wellChanged();
    }//GEN-LAST:event_wellPerformanceActionPerformed

    private void teleopDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_teleopDeleteActionPerformed
        // gets row selected to be deleted
        int selRow = teleopTable.getSelectedRow();
        
        if(selRow != -1) 
        {
            // removes row selected 
            ((DefaultTableModel) teleopTable.getModel()).removeRow(selRow);
            teleopTable.revalidate();
        }
    }//GEN-LAST:event_teleopDeleteActionPerformed

    private void teleopAnotherActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_teleopAnotherActionPerformed
        teleopChanged();        
    }//GEN-LAST:event_teleopAnotherActionPerformed

    private void teleopCrossActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_teleopCrossActionPerformed
        teleopChanged();        
    }//GEN-LAST:event_teleopCrossActionPerformed

    private void teleopSubmitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_teleopSubmitActionPerformed
        // adds a row which assigns variables 
        // for stack values given to table 
        DefaultTableModel teleopModel = (DefaultTableModel) teleopTable.getModel();
        teleopModel.addRow(new Object[]{teleopDefenseString,
        teleopCrossCheck, teleopAnotherCheck, teleopTimesInt});   
        
        // resets state of checkboxes and spinner
        teleopDefense.setSelectedIndex(0);
        teleopTimes.setValue(0);
    
        teleopCrossCheck = false;
        teleopCross.setSelected(false);
        
        teleopAnotherCheck = false;
        teleopAnother.setSelected(false);
        
        
        // disables submit button, as points to submit are cleared
        teleopSubmit.setEnabled(false);
        
        teleopChanged();
        
    }//GEN-LAST:event_teleopSubmitActionPerformed

    private void coopPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_coopPerformed

    }//GEN-LAST:event_coopPerformed

    private void pointsChanged(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pointsChanged

    }//GEN-LAST:event_pointsChanged

    private void optionsScouterKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_optionsScouterKeyReleased
        optionsChanged();
    }//GEN-LAST:event_optionsScouterKeyReleased

    private void optionsTeamKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_optionsTeamKeyReleased
       optionsChanged();
    }//GEN-LAST:event_optionsTeamKeyReleased

    private void optionsMatchKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_optionsMatchKeyReleased
        optionsChanged();
    }//GEN-LAST:event_optionsMatchKeyReleased

    private void wellFoulResultActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_wellFoulResultActionPerformed
        wellChanged();
    }//GEN-LAST:event_wellFoulResultActionPerformed

    private void teleopDefenseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_teleopDefenseActionPerformed
        teleopChanged();
    }//GEN-LAST:event_teleopDefenseActionPerformed

    private void wellShootingActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_wellShootingActionPerformed
        wellChanged();
    }//GEN-LAST:event_wellShootingActionPerformed

    private void wellShootingFunctionalityActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_wellShootingFunctionalityActionPerformed
        wellChanged();
    }//GEN-LAST:event_wellShootingFunctionalityActionPerformed

    private void autoDefenseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_autoDefenseActionPerformed
        autoChanged();
    }//GEN-LAST:event_autoDefenseActionPerformed

    private void autoReachesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_autoReachesActionPerformed
        autoChanged();        
    }//GEN-LAST:event_autoReachesActionPerformed

    private void autoCrossesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_autoCrossesActionPerformed
        autoChanged();
    }//GEN-LAST:event_autoCrossesActionPerformed

    private void optionsClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_optionsClearActionPerformed
        clearEverything();
    }//GEN-LAST:event_optionsClearActionPerformed

    private void optionsScoreStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_optionsScoreStateChanged
        optionsChanged();
    }//GEN-LAST:event_optionsScoreStateChanged

    private void wellCommentsKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_wellCommentsKeyTyped
        wellChanged();
    }//GEN-LAST:event_wellCommentsKeyTyped

    private void optionsWinActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_optionsWinActionPerformed
        optionsChanged();
    }//GEN-LAST:event_optionsWinActionPerformed

    private void teleopLowStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_teleopLowStateChanged
        teleopChanged();
    }//GEN-LAST:event_teleopLowStateChanged

    private void teleopHighStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_teleopHighStateChanged
        teleopChanged();
    }//GEN-LAST:event_teleopHighStateChanged

    private void teleopTimesStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_teleopTimesStateChanged
        teleopChanged();
    }//GEN-LAST:event_teleopTimesStateChanged
    private void teleopChanged()
    {
        teleopCrossCheck = teleopCross.isSelected();
        teleopAnotherCheck = teleopAnother.isSelected();
        teleopDefenseString = teleopDefense.getSelectedItem().toString();
        teleopLowInt = Integer.parseInt(teleopLow.getValue().toString());
        teleopHighInt = Integer.parseInt(teleopHigh.getValue().toString());
        teleopTimesInt = Integer.parseInt(teleopTimes.getValue().toString());
                
        // TODO, make so check string if "-"
        // enables submit button in teleop if value points > 0
        if ((teleopDefense.getSelectedIndex() != 0 ) && ((teleopCrossCheck == true)
                || (teleopAnotherCheck == true)) && teleopTimesInt > 0)
        {
            teleopSubmit.setEnabled(true);
        }
        
        // otherwise, submit button is disabled
        else
        {
            teleopSubmit.setEnabled(false);
        }
      
    } 
    private void autoChanged()
    {
        autoCrossesCheck = autoCrosses.isSelected();
        autoReachesCheck = autoReaches.isSelected();
        autoDefenseString = autoDefense.getSelectedItem().toString();
        
        
        if (autoReaches.isSelected() == true)
        {
            autoCrosses.setEnabled(true);
            autoDefense.setEnabled(true);

        }
        
        else
        {
            autoCrosses.setEnabled(false);
            autoDefense.setEnabled(false);
            autoCrosses.setSelected(false);
            autoDefense.setSelectedIndex(0);
            
        }
            
    }
    
    private void endChanged() {
        endClimbedCheck = endClimbed.isSelected();
        
        endChallengedCheck = endChallenged.isSelected();
        
        if (endChallenged.isSelected())
        {   
            endClimbed.setEnabled(true);
        }
        
        else
        {   
            endClimbed.setEnabled(false);
            
            endClimbed.setSelected(false); 
        }  
    }
    
    private void wellChanged() {
        // enables change of foul points if foul is checked
        if (wellFoul.isSelected())
        {
            wellFoulResult.setEnabled(true);
            wellFoulLabel.setEnabled(true);
        }
        
        else
        {   // resets value of foul points when unchecked
            wellFoulResult.setSelectedIndex(0);
            wellFoulResult.setEnabled(false);
            wellFoulLabel.setEnabled(false);
        }
        
        
        wellShootingFunctionalityString = 
        wellShootingFunctionality.getSelectedItem().toString();
        wellShootingString = wellShooting.getSelectedItem().toString();
        wellFoulCheck = wellFoul.isSelected();
        wellFoulResultString = wellFoulResult.getSelectedItem().toString();
        wellPerformanceString = wellPerformance.getSelectedItem().toString();
        wellDriveString = wellDrive.getSelectedItem().toString();
        wellDriveFunctionalityString = wellDriveFunctionality.getSelectedItem().toString();
        
        wellCommentsString = wellComments.getText();
    }
    
    private void textFieldCondClear(java.awt.TextField field) {
        for (char c : field.getText().toCharArray())
            {
                if (!Character.isDigit(c))
                {
                    field.setText("");
                }
            }
    }

    private void optionsChanged() 
    {
        int submitInt = 0;
        
        try
        {
            optionsScoreInt = Integer.parseInt(optionsScore.getValue().toString());
            
            if (!("".equals(optionsScouter.getText())))
                optionsScouterString = optionsScouter.getText();
            else
                submitInt++;
            
            if (optionsScouter.getText().contains("-"))
            {
                textFieldCondClear(optionsScouter);
                submitInt = 4;
            }
            
            if (!("".equals(optionsMatch.getText())))
                optionsMatchInt = Integer.parseInt(optionsMatch.getText());
            else
                submitInt++;
            
            if (optionsMatch.getText().contains("-"))
            {
                textFieldCondClear(optionsMatch);
                submitInt = 4;
            }
            
            if (!("".equals(optionsTeam.getText())))
                optionsTeamInt = Integer.parseInt(optionsTeam.getText());
            else
                submitInt++;
            
            if (optionsMatch.getText().contains("-")) 
            {
                textFieldCondClear(optionsMatch);
                submitInt = 4;
            }
            
        }
        catch (NumberFormatException e)
        {
            JOptionPane.showMessageDialog(null, "Not a place for a letter", "Error", JOptionPane.ERROR_MESSAGE);
            
            textFieldCondClear(optionsMatch);
            textFieldCondClear(optionsTeam);
            submitInt = 4;
        }
        
        optionsScouterString = optionsScouter.getText();
        optionsWinCheck = optionsWin.isSelected();
        optionsSave.setEnabled(submitInt == 0);
        
    }    
    
    private void clearEverything()
    {
        // clear EVERYTHING
        autoReaches.setSelected(false);
        autoCrosses.setSelected(false);
        autoLow.setSelected(false);
        autoHigh.setSelected(false);
        autoDefense.setSelectedIndex(0);
        
        wellPerformance.setSelectedIndex(0);
        wellFoul.setSelected(false);
        wellChanged();
        wellComments.setText("");
        
        wellDrive.setSelectedIndex(0);
        wellDriveFunctionality.setSelectedIndex(0);
        wellShooting.setSelectedIndex(0);
        wellShootingFunctionality.setSelectedIndex(0);
        
        endChallenged.setSelected(false);
        endClimbed.setSelected(false);
        
        optionsTeam.setText("");
        optionsMatch.setText("");
        optionsScore.setValue(0);
        optionsWin.setSelected(false);
        
        teleopDefense.setSelectedIndex(0);
        teleopCross.setSelected(false);
        teleopAnother.setSelected(false);
        teleopLow.setValue(0);
        teleopHigh.setValue(0);
        teleopTimes.setValue(0);
        
        teleopChanged();
        optionsChanged();
        endChanged();
        wellChanged();
        autoChanged();
        
        teleopRowCount = teleopTable.getRowCount();
        for (int i = 0; i < teleopRowCount; ++i)
        {
            ((DefaultTableModel) teleopTable.getModel()).removeRow(0);           
        }
        teleopTable.revalidate();
    }
    
    
    public static void main(String args[]) 
    {
        
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox autoCrosses;
    private javax.swing.JComboBox<String> autoDefense;
    private javax.swing.JCheckBox autoHigh;
    private javax.swing.JCheckBox autoLow;
    private javax.swing.JPanel autoPanel;
    private javax.swing.JCheckBox autoReaches;
    private javax.swing.JCheckBox endChallenged;
    private javax.swing.JCheckBox endClimbed;
    private javax.swing.JPanel endPanel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JPanel mainPanel;
    private javax.swing.JButton optionsClear;
    private javax.swing.JButton optionsHelp;
    private java.awt.TextField optionsMatch;
    private javax.swing.JLabel optionsMatchLabel;
    private javax.swing.JLabel optionsOverrideLabel1;
    private javax.swing.JPanel optionsPanel;
    private javax.swing.JButton optionsSave;
    private javax.swing.JSpinner optionsScore;
    private javax.swing.JLabel optionsScoreLabel;
    private java.awt.TextField optionsScouter;
    private javax.swing.JLabel optionsScouterLabel;
    private java.awt.TextField optionsTeam;
    private javax.swing.JLabel optionsTeamLabel;
    private javax.swing.JCheckBox optionsWin;
    private javax.swing.JCheckBox teleopAnother;
    private javax.swing.JCheckBox teleopCross;
    private javax.swing.JComboBox<String> teleopDefense;
    private javax.swing.JButton teleopDelete;
    private javax.swing.JSpinner teleopHigh;
    private javax.swing.JLabel teleopHighLabel;
    private javax.swing.JSpinner teleopLow;
    private javax.swing.JLabel teleopLowLabel;
    private javax.swing.JPanel teleopPanel;
    private javax.swing.JButton teleopSubmit;
    private javax.swing.JPanel teleopSubmitPanel;
    private javax.swing.JTable teleopTable;
    private javax.swing.JSpinner teleopTimes;
    private javax.swing.JLabel teleopTimesLabel;
    private javax.swing.JTextArea wellComments;
    private javax.swing.JLabel wellCommentsLabel;
    private javax.swing.JComboBox wellDrive;
    private javax.swing.JComboBox wellDriveFunctionality;
    private javax.swing.JLabel wellDriveFunctionalityLabel;
    private javax.swing.JLabel wellDriveLabel;
    private javax.swing.JPanel wellDrivePanel;
    private javax.swing.JPanel wellDrivePanel2;
    private javax.swing.JCheckBox wellFoul;
    private javax.swing.JLabel wellFoulLabel;
    private javax.swing.JLabel wellFoulLabel1;
    private javax.swing.JPanel wellFoulPanel;
    private javax.swing.JPanel wellFoulPanel1;
    private javax.swing.JComboBox<String> wellFoulResult;
    private javax.swing.JPanel wellPanel;
    private javax.swing.JComboBox wellPerformance;
    private javax.swing.JLabel wellPerformanceLabel;
    private javax.swing.JComboBox wellShooting;
    private javax.swing.JComboBox wellShootingFunctionality;
    private javax.swing.JLabel wellShootingFunctionalityLabel;
    private javax.swing.JLabel wellShootingLabel;
    // End of variables declaration//GEN-END:variables


}
